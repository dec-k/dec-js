{"version":3,"sources":["UI/Header/header.module.css","assets/images/headerico.PNG","UI/Navbar/navbar.module.css","Layout/layout.module.css","hoc/Auxiliary/auxiliary.js","UI/Header/header.js","UI/Navbar/navbar.js","Layout/layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Icon","__webpack_require__","p","NavBar","Container","aux","props","children","header","react_default","a","createElement","className","classes","src","headerIco","alt","navbar","auxiliary","Header_header","href","target","layout","Navbar_navbar","App","Layout_layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,uCCDlBF,EAAAC,QAAiBE,EAAAC,EAAuB,uDCCxCJ,EAAAC,QAAA,CAAkBI,OAAA,yCCAlBL,EAAAC,QAAA,CAAkBK,UAAA,8KCCHC,SAFH,SAACC,GAAD,OAAWA,EAAMC,2CCUdC,EANA,SAACF,GACZ,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQb,KAAMc,IAAKC,IAAWC,IAAI,sBCa3CC,EAdA,SAACX,GACZ,OACIG,EAAAC,EAAAC,cAACO,EAAD,KAEIT,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQV,QACpBM,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,KAAR,QACAX,EAAAC,EAAAC,cAAA,KAAGS,KAAK,2BAA2BC,OAAO,UAA1C,UACAZ,EAAAC,EAAAC,cAAA,KAAGS,KAAK,KAAR,8BCIDE,EATA,SAAChB,GACZ,OACIG,EAAAC,EAAAC,cAACO,EAAD,KACIT,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQT,WAAxB,uDCFGoB,MANf,WACE,OACEf,EAAAC,EAAAC,cAACc,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.16c4e1d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Icon\":\"header_Icon__ITDRr\"};","module.exports = __webpack_public_path__ + \"static/media/headerico.8a4271bb.PNG\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"navbar_NavBar__1Nsv6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"layout_Container__i8TK4\"};","const aux = (props) => props.children;\r\n\r\nexport default aux;\r\n\r\n/*\r\n\r\nQ: What the fuck is this?\r\n\r\nIt's an auxiliary component - a 'dummy wrapper' to bypass a jsx\r\nlimitation that prohibits the returning of adjacent elements.\r\nWrap your export with this component, where it will substitute as \r\nthe 'containing div'.\r\n\r\nFor a usage example within this project, refer to the BurgerBuilder\r\njs file, in which I wrap the entire output with this aux file.\r\n\r\n*/","import React from 'react';\r\nimport classes from './header.module.css'\r\nimport headerIco from '../../assets/images/headerico.PNG'\r\n\r\nconst header = (props) => {\r\n    return (\r\n        <img className={classes.Icon} src={headerIco} alt=\"\"/>\r\n    );\r\n}\r\n\r\nexport default header;","import React from 'react';\r\nimport Header from '../../UI/Header/header'\r\nimport Aux from '../../hoc/Auxiliary/auxiliary'\r\nimport classes from './navbar.module.css';\r\n\r\nconst navbar = (props) => {\r\n    return (\r\n        <Aux>\r\n\r\n            <div className={classes.NavBar}>\r\n                <Header />\r\n                <a href='/'>Home</a>\r\n                <a href='https://github.com/dec-k' target='_blank'>Github</a>\r\n                <a href='/'>Lootsim</a>\r\n            </div>\r\n        </Aux>\r\n    );\r\n}\r\n\r\nexport default navbar;","import React from 'react';\r\nimport Aux from '../hoc/Auxiliary/auxiliary'\r\nimport Navbar from '../UI/Navbar/navbar';\r\nimport classes from './layout.module.css';\r\n\r\n/*\r\nDictate the layout of constant or near-constant page elements like navbars, headers, etc.\r\n*/\r\nconst layout = (props) => {\r\n    return (\r\n        <Aux>\r\n            <Navbar />\r\n            <div className={classes.Container}>replace me with content when you have some.</div>\r\n        </Aux>\r\n    );\r\n}\r\n\r\nexport default layout;","import React from 'react';\r\nimport Layout from '../src/Layout/layout'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}